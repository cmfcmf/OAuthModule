<?php
/**
 * OAuth.
 *
 * @copyright Christian Flach (Cmfcmf)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Christian Flach <cmfcmf.flach@gmail.com>.
 * @link https://www.github.com/cmfcmf/OAuth
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.6.1 (http://modulestudio.de).
 */

namespace Cmfcmf\OAuthModule\Controller\Base;

use Cmfcmf\OAuthModule\Util\ControllerUtil;

use Symfony\Component\Security\Core\Exception\AccessDeniedException;

use LogUtil;
use ModUtil;
use PageUtil;
use SecurityUtil;
use ThemeUtil;
use Zikula_AbstractController;
use Zikula_View;
use Zikula\Core\Response\PlainResponse;

/**
 * Controller for external calls base class.
 */
class ExternalController extends Zikula_AbstractController
{
    /**
     * Post initialise.
     *
     * Run after construction.
     *
     * @return void
     */
    protected function postInitialize()
    {
        // Set caching to false by default.
        $this->view->setCaching(Zikula_View::CACHE_DISABLED);
    }

    /**
     * Displays one item of a certain object type using a separate template for external usages.
     *
     * @param string $ot          The object type.
     * @param int    $id          Identifier of the item to be shown.
     * @param string $source      Source of this call (contentType or scribite).
     * @param string $displayMode Display mode (link or embed).
     *
     * @return string Desired data output.
     */
    public function displayAction($ot, $id, $source, $displayMode)
    {
        $controllerHelper = new ControllerUtil($this->serviceManager, ModUtil::getModule($this->name));
    
        $objectType = $ot;
        $utilArgs = array('controller' => 'external', 'action' => 'display');
        if (!in_array($objectType, $controllerHelper->getObjectTypes('controller', $utilArgs))) {
            $objectType = $controllerHelper->getDefaultObjectType('controllerType', $utilArgs);
        }
    
        $component = $this->name . ':' . ucwords($objectType) . ':';
        if (!SecurityUtil::checkPermission($component, $id . '::', ACCESS_READ)) {
            return '';
        }
    
        if (!in_array($source, array('contentType', 'scribite'))) {
            $source = 'contentType';
        }
    
        if (!in_array($displayMode, array('link', 'embed'))) {
            $displayMode = 'embed';
        }
    
        $entityClass = '\\Cmfcmf\\OAuthModule\\Entity\\' . ucwords($objectType) . 'Entity';
        $repository = $this->entityManager->getRepository($entityClass);
        $repository->setRequest($this->request);
        $idFields = ModUtil::apiFunc('CmfcmfOAuthModule', 'selection', 'getIdFields', array('ot' => $objectType));
        $idValues = array('id' => $id);
    
        $hasIdentifier = $controllerHelper->isValidIdentifier($idValues);
        if (!$hasIdentifier) {
            return $this->__('Error! Invalid identifier received.');
        }
    
        // assign object data fetched from the database
        $entity = $repository->selectById($idValues);
        if ((!is_array($entity) && !is_object($entity)) || !isset($entity[$idFields[0]])) {
            return $this->__('No such item.');
        }
    
        $entity->initWorkflow();
    
        /*if ($controllerHelper->hasCompositeKeys($objectType)) {
            
            $instanceId = '';
            foreach ($idFields as $idField) {
                if (!empty($instanceId)) {
                    $instanceId .= '_';
                }
                $instanceId .= $idValues[$idField];
            }
            $instance = $instanceId . '::';
        } else {*/
            $instance = $id . '::';
        /*}*/
    
        $this->view->setCaching(Zikula_View::CACHE_ENABLED);
        // set cache id
        $accessLevel = ACCESS_READ;
        if (SecurityUtil::checkPermission($component, $instance, ACCESS_COMMENT)) {
            $accessLevel = ACCESS_COMMENT;
        }
        if (SecurityUtil::checkPermission($component, $instance, ACCESS_EDIT)) {
            $accessLevel = ACCESS_EDIT;
        }
        $this->view->setCacheId($objectType . '|' . $id . '|a' . $accessLevel);
    
        $this->view->assign('objectType', $objectType)
                  ->assign('source', $source)
                  ->assign($objectType, $entity)
                  ->assign('displayMode', $displayMode);
    
        return $this->response($this->view->fetch('External/' . ucwords($objectType) . '/display.tpl'));
    }
    
    /**
     * Popup selector for Scribite plugins.
     * Finds items of a certain object type.
     *
     * @param string $objectType The object type.
     * @param string $editor     Name of used Scribite editor.
     * @param string $sort       Sorting field.
     * @param string $sortdir    Sorting direction.
     * @param int    $pos        Current pager position.
     * @param int    $num        Amount of entries to display.
     *
     * @return output The external item finder page
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     */
    public function finderAction($objectType, $editor, $sort, $sortdir, $pos = 1, $num = 0)
    {
        PageUtil::addVar('stylesheet', ThemeUtil::getModuleStylesheet('CmfcmfOAuthModule'));
    
        $getData = $this->request->query;
        $controllerHelper = new ControllerUtil($this->serviceManager, ModUtil::getModule($this->name));
    
        $utilArgs = array('controller' => 'external', 'action' => 'finder');
        if (!in_array($objectType, $controllerHelper->getObjectTypes('controller', $utilArgs))) {
            $objectType = $controllerHelper->getDefaultObjectType('controllerType', $utilArgs);
        }
    
        if (!SecurityUtil::checkPermission('CmfcmfOAuthModule:' . ucwords($objectType) . ':', '::', ACCESS_COMMENT)) {
            throw new AccessDeniedException();
        }
    
        $entityClass = '\\Cmfcmf\\OAuthModule\\Entity\\' . ucwords($objectType) . 'Entity';
        $repository = $this->entityManager->getRepository($entityClass);
        $repository->setRequest($this->request);
    
        if (empty($editor) || !in_array($editor, array('xinha', 'tinymce'/*, 'ckeditor'*/))) {
            return $this->__('Error: Invalid editor context given for external controller action.');
        }
        if (empty($sort) || !in_array($sort, $repository->getAllowedSortingFields())) {
            $sort = $repository->getDefaultSortingField();
        }
    
        $sdir = strtolower($sortdir);
        if ($sdir != 'asc' && $sdir != 'desc') {
            $sdir = 'asc';
        }
    
        $sortParam = $sort . ' ' . $sdir;
    
        // the current offset which is used to calculate the pagination
        $currentPage = (int) $pos;
    
        // the number of items displayed on a page for pagination
        $resultsPerPage = (int) $num;
        if ($resultsPerPage == 0) {
            $resultsPerPage = $this->getVar('pageSize', 20);
        }
        $where = '';
        list($entities, $objectCount) = $repository->selectWherePaginated($where, $sortParam, $currentPage, $resultsPerPage);
    
        foreach ($entities as $k => $entity) {
            $entity->initWorkflow();
        }
    
        $view = Zikula_View::getInstance('CmfcmfOAuthModule', false);
    
        $view->assign('editorName', $editor)
             ->assign('objectType', $objectType)
             ->assign('items', $entities)
             ->assign('sort', $sort)
             ->assign('sortdir', $sdir)
             ->assign('currentPage', $currentPage)
             ->assign('pager', array('numitems'     => $objectCount,
                                     'itemsperpage' => $resultsPerPage));
    
        return new PlainResponse($view->display('External/' . ucwords($objectType) . '/find.tpl'));
    }
}
