<?php
/**
 * OAuth.
 *
 * @copyright Christian Flach (Cmfcmf)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Christian Flach <cmfcmf.flach@gmail.com>.
 * @link https://www.github.com/cmfcmf/OAuth
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.6.1 (http://modulestudio.de).
 */

namespace Cmfcmf\OAuthModule\Api\Base;

use Cmfcmf\OAuthModule\Util\ControllerUtil;

use FormUtil;
use LogUtil;
use ModUtil;
use SecurityUtil;
use ServiceUtil;
use Zikula_AbstractApi;
use Zikula_View;

use Zikula\Module\SearchModule\Entity\SearchResultEntity;

/**
 * Search api base class.
 */
class SearchApi extends Zikula_AbstractApi
{
    /**
     * Get search plugin information.
     *
     * @return array The search plugin information
     */
    public function info()
    {
        return array('title'     => $this->name,
                     'functions' => array($this->name => 'search'));
    }
    
    /**
     * Display the search form.
     *
     * @param array $args List of arguments.
     *
     * @return string template output
     */
    public function options(array $args = array())
    {
        if (!SecurityUtil::checkPermission($this->name . '::', '::', ACCESS_READ)) {
            return '';
        }
    
        $view = Zikula_View::getInstance($this->name);
    
        $view->assign('active_mappedId', (!isset($args['active_mappedId']) || isset($args['active']['active_mappedId'])));
    
        return $view->fetch('Search/options.tpl');
    }
    
    /**
     * Executes the actual search process.
     *
     * @param array $args List of arguments.
     *
     * @return boolean
     *
     * @throws RuntimeException Thrown if search results can not be saved
     */
    public function search(array $args = array())
    {
        if (!SecurityUtil::checkPermission($this->name . '::', '::', ACCESS_READ)) {
            return '';
        }
    
        // ensure that database information of Search module is loaded
        ModUtil::dbInfoLoad('Search');
    
        // save session id as it is used when inserting search results below
        $sessionId  = session_id();
    
        // retrieve list of activated object types
        $searchTypes = isset($args['objectTypes']) ? (array)$args['objectTypes'] : (array) FormUtil::getPassedValue('cmfcmfOAuthModuleSearchTypes', array(), 'GETPOST');
    
        $controllerHelper = new ControllerUtil($this->serviceManager, ModUtil::getModule($this->name));
        $utilArgs = array('api' => 'search', 'action' => 'search');
        $allowedTypes = $controllerHelper->getObjectTypes('api', $utilArgs);
        $entityManager = ServiceUtil::getService('doctrine.entitymanager');
        $currentPage = 1;
        $resultsPerPage = 50;
    
        foreach ($searchTypes as $objectType) {
            if (!in_array($objectType, $allowedTypes)) {
                continue;
            }
    
            $whereArray = array();
            $languageField = null;
            switch ($objectType) {
                case 'mappedId':
                    $whereArray[] = 'tbl.workflowState';
                    $whereArray[] = 'tbl.claimedId';
                    $whereArray[] = 'tbl.provider';
                    break;
            }
            $where = \Zikula\Module\SearchModule\Api\UserApi::construct_where($args, $whereArray, $languageField);
    
            $entityClass = '\\Cmfcmf\\OAuthModule\\Entity\\' . ucwords($objectType) . 'Entity';
            $repository = $entityManager->getRepository($entityClass);
    
            // get objects from database
            list($entities, $objectCount) = $repository->selectWherePaginated($where, '', $currentPage, $resultsPerPage, false);
    
            if ($objectCount == 0) {
                continue;
            }
    
            $idFields = ModUtil::apiFunc($this->name, 'selection', 'getIdFields', array('ot' => $objectType));
            $descriptionField = $repository->getDescriptionFieldName();
            foreach ($entities as $entity) {
                // create identifier for permission check
                $instanceId = '';
                foreach ($idFields as $idField) {
                    if (!empty($instanceId)) {
                        $instanceId .= '_';
                    }
                    $instanceId .= $entity[$idField];
                }
                if (!SecurityUtil::checkPermission($this->name . ':' . ucfirst($objectType) . ':', $instanceId . '::', ACCESS_OVERVIEW)) {
                    continue;
                }
    
                $title = $entity->getTitleFromDisplayPattern();
                $description = ($descriptionField != '') ? $entity[$descriptionField] : '';
                $created = (isset($entity['createdDate'])) ? $entity['createdDate']->format('Y-m-d H:i:s') : '';
    
                $searchItemData = array(
                    'title'   => $title,
                    'text'    => $description,
                    'extra'   => '',
                    'created' => $created,
                    'module'  => $this->name,
                    'session' => $sessionId
                );
    
                $searchItem = new SearchResultEntity();
                foreach ($searchItemData as $k => $v) {
                    $fieldName = ($k == 'session') ? 'sesid' : $k;
                    $searchItem[$fieldName] = $v;
                }
                try {
                    $this->entityManager->persist($searchItem);
                    $this->entityManager->flush();
                } catch (\Exception $e) {
                    throw new \RuntimeException($this->__('Error! Could not save the search results.'));
                }
            }
        }
    
        return true;
    }
    
    /**
     * Assign URL to items.
     *
     * @param array $args List of arguments.
     *
     * @return boolean
     */
    public function search_check(array $args = array())
    {
        // nothing to do as we have no display pages which could be linked
        return true;
    }
}
