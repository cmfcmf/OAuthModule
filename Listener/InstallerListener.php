<?php
/**
 * OAuth.
 *
 * @copyright Christian Flach (Cmfcmf)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Christian Flach <cmfcmf.flach@gmail.com>.
 * @link https://www.github.com/cmfcmf/OAuth
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.6.1 (http://modulestudio.de).
 */

namespace Cmfcmf\OAuthModule\Listener;

use Cmfcmf\OAuthModule\Listener\Base\InstallerListener as BaseInstallerListener;
use Zikula\Core\Event\GenericEvent;

/**
 * Event handler implementation class for module installer events.
 */
class InstallerListener extends BaseInstallerListener
{
    /**
     * Listener for the `installer.module.installed` event.
     *
     * Called after a module has been successfully installed.
     * Receives `$modinfo` as args.
     *
     * @param GenericEvent $event The event instance.
     */
    public static function moduleInstalled(GenericEvent $event)
    {
        parent::moduleInstalled($event);
    }
    
    /**
     * Listener for the `installer.module.upgraded` event.
     *
     * Called after a module has been successfully upgraded.
     * Receives `$modinfo` as args.
     *
     * @param GenericEvent $event The event instance.
     */
    public static function moduleUpgraded(GenericEvent $event)
    {
        parent::moduleUpgraded($event);
    }
    
    /**
     * Listener for the `installer.module.uninstalled` event.
     *
     * Called after a module has been successfully uninstalled.
     * Receives `$modinfo` as args.
     *
     * @param GenericEvent $event The event instance.
     */
    public static function moduleUninstalled(GenericEvent $event)
    {
        parent::moduleUninstalled($event);
    }
    
    /**
     * Listener for the `installer.module.activated` event.
     *
     * Called after a module has been successfully activated.
     * Receives `$modinfo` as args.
     */
    public static function moduleActivated(GenericEvent $event)
    {
        parent::moduleActivated($event);
    }
    
    /**
     * Listener for the `installer.module.deactivated` event.
     *
     * Called after a module has been successfully deactivated.
     * Receives `$modinfo` as args.
     */
    public static function moduleDeactivated(GenericEvent $event)
    {
        parent::moduleDeactivated($event);
    }
    
    /**
     * Listener for the `installer.subscriberarea.uninstalled` event.
     *
     * Called after a hook subscriber area has been unregistered.
     * Receives args['areaid'] as the areaId. Use this to remove orphan data associated with this area.
     *
     * @param GenericEvent $event The event instance.
     */
    public static function subscriberAreaUninstalled(GenericEvent $event)
    {
        parent::subscriberAreaUninstalled($event);
    }
}
