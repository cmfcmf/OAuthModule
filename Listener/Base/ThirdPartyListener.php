<?php
/**
 * OAuth.
 *
 * @copyright Christian Flach (Cmfcmf)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Christian Flach <cmfcmf.flach@gmail.com>.
 * @link https://www.github.com/cmfcmf/OAuth
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.6.1 (http://modulestudio.de).
 */

namespace Cmfcmf\OAuthModule\Listener\Base;

use Zikula\Core\Event\GenericEvent;

/**
 * Event handler implementation class for special purposes and 3rd party api support.
 */
class ThirdPartyListener
{
    /**
     * Listener for the 'get.pending_content' event with registration requests and
     * other submitted data pending approval.
     *
     * When a 'get.pending_content' event is fired, the Users module will respond with the
     * number of registration requests that are pending administrator approval. The number
     * pending may not equal the total number of outstanding registration requests, depending
     * on how the 'moderation_order' module configuration variable is set, and whether e-mail
     * address verification is required.
     * If the 'moderation_order' variable is set to require approval after e-mail verification
     * (and e-mail verification is also required) then the number of pending registration
     * requests will equal the number of registration requested that have completed the
     * verification process but have not yet been approved. For other values of
     * 'moderation_order', the number should equal the number of registration requests that
     * have not yet been approved, without regard to their current e-mail verification state.
     * If moderation of registrations is not enabled, then the value will always be 0.
     * In accordance with the 'get_pending_content' conventions, the count of pending
     * registrations, along with information necessary to access the detailed list, is
     * assemped as a {@link Zikula_Provider_AggregateItem} and added to the event
     * subject's collection.
     *
     * @param GenericEvent $event The event instance.
     */
    public static function pendingContentListener(GenericEvent $event)
    {
        // nothing required here as no entities use enhanced workflows including approval actions
    }
    
    /**
     * Listener for the `module.scribite.editorhelpers` event.
     *
     * This occurs when Scribite adds pagevars to the editor page.
     * CmfcmfOAuthModule will use this to add a javascript helper to add custom items.
     *
     * @param GenericEvent $event The event instance.
     */
    public static function getEditorHelpers(GenericEvent $event)
    {
        // intended is using the add() method to add a helper like below
        $helpers = $event->getSubject();
        
        $helpers->add(
            array('module' => 'CmfcmfOAuthModule',
                  'type'   => 'javascript',
                  'path'   => 'modules/Cmfcmf/OAuthModule/Resources/public/js/CmfcmfOAuthModule_finder.js')
        );
    }
    
    /**
     * Listener for the `moduleplugin.tinymce.externalplugins` event.
     *
     * Adds external plugin to TinyMCE.
     *
     * @param GenericEvent $event The event instance.
     */
    public static function getTinyMcePlugins(GenericEvent $event)
    {
        // intended is using the add() method to add a plugin like below
        $plugins = $event->getSubject();
        
        $plugins->add(
            array('name' => 'cmfcmfoauthmodule',
                  'path' => 'modules/Cmfcmf/OAuthModule/Resources/docs/scribite/plugins/TinyMce/vendor/tiny_mce/plugins/cmfcmfoauthmodule/editor_plugin.js'
            )
        );
    }
    
    /**
     * Listener for the `moduleplugin.ckeditor.externalplugins` event.
     *
     * Adds external plugin to CKEditor.
     *
     * @param GenericEvent $event The event instance.
     */
    public static function getCKEditorPlugins(GenericEvent $event)
    {
        // intended is using the add() method to add a plugin like below
        $plugins = $event->getSubject();
        
        $plugins->add(
            array('name' => 'cmfcmfoauthmodule',
                  'path' => 'modules/Cmfcmf/OAuthModule/Resources/docs/scribite/plugins/CKEditor/vendor/ckeditor/plugins/cmfcmfoauthmodule/',
                  'file' => 'plugin.js',
                  'img'  => 'ed_cmfcmfoauthmodule.gif'
            )
        );
    }
    
    /**
     * Makes our handlers known to the event system.
     */
    public static function getSubscribedEvents()
    {
        return array(
            'get.pending_content'                   => array('pendingContentListener', 5),
            'module.content.gettypes'               => array('contentGetTypes', 5),
            'module.scribite.editorhelpers'         => array('getEditorHelpers', 5),
            'moduleplugin.tinymce.externalplugins'  => array('getTinyMcePlugins', 5),
            'moduleplugin.ckeditor.externalplugins' => array('getCKEditorPlugins', 5)
        );
    }
}
